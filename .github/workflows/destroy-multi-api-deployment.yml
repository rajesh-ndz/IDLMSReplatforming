name: Destroy Multi License API Infrastructure

on:
  workflow_dispatch:
    inputs:
      ENV:
        description: "Environment to destroy (dev/stage/prod)"
        required: true
        default: "stage"

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'ap-south-1' }}
  TF_REGION:  ${{ vars.AWS_REGION || 'ap-south-1' }}
  ECR_REPO_NAME: ${{ vars.ECR_REPO_NAME }}
  EC2_INSTANCE_NAME_PATTERN: ${{ vars.EC2_INSTANCE_NAME_PATTERN || format('{0}-idlms-app', github.event.inputs.ENV) }}
  TF_INPUT: "false"   # prevent terraform prompting anywhere

jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.ENV }}
    permissions:
      contents: read

    steps:
      - name: Checkout (feature/btl-77)
        uses: actions/checkout@v4
        with:
          ref: feature/btl-77

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I?
        run: aws sts get-caller-identity

      - name: Get AWS Account ID
        id: aws-account
        run: echo "account_id=$(aws sts get-caller-identity --query Account --output text)" >> "$GITHUB_OUTPUT"

      - name: Set TF bucket and artifact bucket
        run: |
          echo "TF_BUCKET=${{ github.event.inputs.ENV }}-btl-idlms-website-backend-api-tfstate-${{ steps.aws-account.outputs.account_id }}" >> $GITHUB_ENV
          echo "BACKUP_BUCKET=idlms-${{ github.event.inputs.ENV }}-website-built-artifact-${{ steps.aws-account.outputs.account_id }}" >> $GITHUB_ENV
          echo "Using TF_BUCKET=$TF_BUCKET"
          echo "Using BACKUP_BUCKET=$BACKUP_BUCKET"

      - name: Detect backend (S3) region (IMPORTANT)
        run: |
          set -euo pipefail
          BKT_REGION=$(aws s3api get-bucket-location \
            --bucket "${TF_BUCKET}" \
            --query 'LocationConstraint' \
            --output text)
          [ -z "$BKT_REGION" ] || [ "$BKT_REGION" = "None" ] && BKT_REGION="us-east-1"
          echo "BACKEND_REGION=$BKT_REGION" >> $GITHUB_ENV
          echo "Terraform state bucket region: $BKT_REGION"

      # ───────────── stop app first ─────────────
      - name: Resolve EC2 instance by Name tag (best effort)
        id: resolve-iid
        continue-on-error: true
        run: |
          set -euo pipefail
          NAME="${EC2_INSTANCE_NAME_PATTERN}"
          IID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${NAME}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text \
            --region "${AWS_REGION}" | awk '{print $1}')
          if [ -n "$IID" ] && [ "$IID" != "None" ]; then
            echo "INSTANCE_ID=$IID" >> $GITHUB_ENV
            echo "Resolved INSTANCE_ID=$IID"
          else
            echo "No running instance found for Name='${NAME}'. Continuing."
          fi

      - name: Stop containers on instance (best effort)
        if: env.INSTANCE_ID != ''
        continue-on-error: true
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --comment "Stop IDLMS containers & cleanup" \
            --parameters 'commands=[
              "set -e",
              "cd /home/ubuntu || exit 0",
              "echo \"Stopping containers if present...\"",
              "if command -v docker-compose >/dev/null 2>&1; then docker-compose down || true; fi",
              "if command -v docker >/dev/null 2>&1; then docker ps -q | xargs -r docker stop; fi",
              "if command -v docker >/dev/null 2>&1; then docker ps -aq | xargs -r docker rm -f; fi",
              "echo \"Done.\""
            ]' \
            --timeout-seconds 300 \
            --region "${{ env.AWS_REGION }}"

      # ───────────── clean artifacts ─────────────
      - name: Empty artifact S3 prefix for this env (best effort)
        continue-on-error: true
        run: |
          set -euo pipefail
          echo "Emptying s3://${BACKUP_BUCKET}/${{ github.event.inputs.ENV }}/ ..."
          aws s3 rm "s3://${BACKUP_BUCKET}/${{ github.event.inputs.ENV }}/" --recursive --region "${AWS_REGION}" || true

      - name: Derive ECR repo URL / region (best effort)
        id: ecr-derive
        continue-on-error: true
        run: |
          set -euo pipefail
          ACCOUNT_ID="${{ steps.aws-account.outputs.account_id }}"
          REPO_NAME="${ECR_REPO_NAME:-${{ github.event.inputs.ENV }}-idlms-api}"
          ECR_REGION="${AWS_REGION}"
          if ! aws ecr describe-repositories --repository-names "$REPO_NAME" --region "$ECR_REGION" >/dev/null 2>&1; then
            for R in ap-south-1 ap-southeast-1; do
              if [ "$R" != "$ECR_REGION" ] && aws ecr describe-repositories --repository-names "$REPO_NAME" --region "$R" >/dev/null 2>&1; then
                ECR_REGION="$R"; break
              fi
            done
          fi
          if aws ecr describe-repositories --repository-names "$REPO_NAME" --region "$ECR_REGION" >/dev/null 2>&1; then
            echo "ECR_REPO_URL=${ACCOUNT_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/${REPO_NAME}" >> $GITHUB_ENV
            echo "ECR_REGION=${ECR_REGION}" >> $GITHUB_ENV
            echo "Resolved ECR_REPO_URL=${ACCOUNT_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/${REPO_NAME}"
          else
            echo "No ECR repository found for $REPO_NAME — skipping ECR purge."
          fi

      - name: Purge all images in ECR repo (best effort)
        if: env.ECR_REPO_URL != ''
        continue-on-error: true
        run: |
          set -euo pipefail
          REPO_NAME="$(echo "${ECR_REPO_URL}" | cut -d/ -f2)"
          echo "Purging ALL images in $REPO_NAME (${ECR_REGION}) ..."
          while : ; do
            IDS=$(aws ecr list-images --repository-name "$REPO_NAME" --region "${ECR_REGION}" --query 'imageIds' --output json)
            COUNT=$(echo "$IDS" | jq 'length')
            [ "$COUNT" -eq 0 ] && { echo "No more images."; break; }
            echo "$IDS" | jq -c '.[:100]' > batch.json
            aws ecr batch-delete-image --repository-name "$REPO_NAME" --image-ids file://batch.json --region "${ECR_REGION}" || true
          done
          echo "ECR purge complete."

      # ───────────── helper to destroy a module with correct backend region ─────────────
      - name: Destroy Terraform modules (CloudWatch, API, NLB, ECR)
        run: |
          set -euo pipefail
          ENVIRONMENT="${{ github.event.inputs.ENV }}"
          BACKEND_BUCKET="${TF_BUCKET}"
          BACKEND_REGION="${BACKEND_REGION}"

          tfd() {
            MOD="$1" ; KEY="$2"
            if [ ! -d "infra/${MOD}" ]; then
              echo "infra/${MOD} not found; skipping"
              return 0
            fi
            echo "::group::Destroy ${MOD}"
            cd "infra/${MOD}"
            terraform init -reconfigure -upgrade \
              -backend-config="bucket=${BACKEND_BUCKET}" \
              -backend-config="key=${KEY}" \
              -backend-config="region=${BACKEND_REGION}"
            # ensure tfvars so TF never prompts
            [ -f "${ENVIRONMENT}.tfvars" ] || echo "env = \"${ENVIRONMENT}\"" > "${ENVIRONMENT}.tfvars"
            terraform destroy -auto-approve -input=false -var-file="${ENVIRONMENT}.tfvars" || true
            cd - >/dev/null
            echo "::endgroup::"
          }

          # Order matters: CW -> API -> NLB -> ECR
          tfd "cloudwatch" "${ENVIRONMENT}/cloudwatch/terraform.tfstate"
          tfd "rest-api"   "${ENVIRONMENT}/rest-api/terraform.tfstate"
          tfd "nlb"        "${ENVIRONMENT}/nlb/terraform.tfstate"
          tfd "ecr"        "${ENVIRONMENT}/ecr/terraform.tfstate"

      - name: Destroy SSM (import-if-exists, correct backend region)
        run: |
          set -euo pipefail
          ENVIRONMENT="${{ github.event.inputs.ENV }}"
          BACKEND_BUCKET="${TF_BUCKET}"
          BACKEND_REGION="${BACKEND_REGION}"

          if [ -d infra/ssm ]; then
            cd infra/ssm
            terraform init -reconfigure -upgrade \
              -backend-config="bucket=${BACKEND_BUCKET}" \
              -backend-config="key=${ENVIRONMENT}/ssm/terraform.tfstate" \
              -backend-config="region=${BACKEND_REGION}"
            # ensure tfvars and feed var.env to import
            echo "env = \"${ENVIRONMENT}\"" > "${ENVIRONMENT}.tfvars"
            export TF_VAR_env="${ENVIRONMENT}"
            export TF_INPUT=false
            terraform import -input=false aws_ssm_parameter.app_env      "/idlms/shared/${ENVIRONMENT}/.env" || true
            terraform import -input=false aws_ssm_parameter.last_success "/idlms/license-api/last-successful-build" || true
            terraform destroy -auto-approve -input=false -var-file="${ENVIRONMENT}.tfvars" || true
            cd - >/dev/null
          else
            echo "infra/ssm missing; doing CLI fallback deletes (best effort)"
            aws ssm delete-parameter --name "/idlms/shared/${ENVIRONMENT}/.env" --region "${AWS_REGION}" || true
            aws ssm delete-parameter --name "/idlms/license-api/last-successful-build" --region "${AWS_REGION}" || true
          fi

      - name: Empty S3 bucket prefix again (best effort)
        continue-on-error: true
        run: |
          aws s3 rm "s3://${BACKUP_BUCKET}/${{ github.event.inputs.ENV }}/" --recursive --region "${AWS_REGION}" || true

      - name: Destroy S3 (skip if missing)
        run: |
          set -euo pipefail
          ENVIRONMENT="${{ github.event.inputs.ENV }}"
          BACKEND_BUCKET="${TF_BUCKET}"
          BACKEND_REGION="${BACKEND_REGION}"
          if [ ! -d infra/s3 ]; then echo "infra/s3 not found; skipping"; exit 0; fi
          cd infra/s3
          terraform init -reconfigure -upgrade \
            -backend-config="bucket=${BACKEND_BUCKET}" \
            -backend-config="key=${ENVIRONMENT}/s3/terraform.tfstate" \
            -backend-config="region=${BACKEND_REGION}"
          [ -f "${ENVIRONMENT}.tfvars" ] || echo "env = \"${ENVIRONMENT}\"" > "${ENVIRONMENT}.tfvars"
          terraform destroy -auto-approve -input=false -var-file="${ENVIRONMENT}.tfvars"

      - name: Destroy VPC (skip if missing)
        run: |
          set -euo pipefail
          ENVIRONMENT="${{ github.event.inputs.ENV }}"
          BACKEND_BUCKET="${TF_BUCKET}"
          BACKEND_REGION="${BACKEND_REGION}"
          if [ ! -d infra/vpc ]; then echo "infra/vpc not found; skipping"; exit 0; fi
          cd infra/vpc
          terraform init -reconfigure -upgrade \
            -backend-config="bucket=${BACKEND_BUCKET}" \
            -backend-config="key=${ENVIRONMENT}/vpc/terraform.tfstate" \
            -backend-config="region=${BACKEND_REGION}"
          [ -f "${ENVIRONMENT}.tfvars" ] || echo "env = \"${ENVIRONMENT}\"" > "${ENVIRONMENT}.tfvars"
          terraform destroy -auto-approve -input=false -var-file="${ENVIRONMENT}.tfvars"
