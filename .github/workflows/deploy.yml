name: Deploy Multi License API with Rollback Options (compose-friendly)

on:
  workflow_dispatch:
    inputs:
      ENV:
        description: "Environment to deploy (dev/staging/prod)"
        required: true
        default: "stage"
      ROLLBACK_TAG:
        description: "Optional: Previous tag to deploy (e.g., 2025.06.30.02). If blank, deploys new build."
        required: false

env:
  # Use repo Variables if set; otherwise fall back to these defaults
  AWS_REGION: ${{ vars.AWS_REGION || 'ap-south-1' }}
  TF_REGION:  ${{ vars.AWS_REGION || 'ap-south-1' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.ENV || 'stage' }}
    permissions:
      contents: read

    steps:
      - name: Checkout feature/btl-77 codebase
        uses: actions/checkout@v4
        with:
          ref: feature/btl-77

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials (static keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token:   ${{ secrets.AWS_SESSION_TOKEN }}   # if using temp creds
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I?
        run: aws sts get-caller-identity

      - name: Get AWS Account ID
        id: aws-account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"

      - name: Set dynamic TF & backup buckets
        run: |
          echo "TF_BUCKET=${{ github.event.inputs.ENV }}-btl-idlms-backend-api-tfstate-${{ steps.aws-account.outputs.account_id }}" >> $GITHUB_ENV
          echo "BACKUP_BUCKET=idlms-${{ github.event.inputs.ENV }}-built-artifact-${{ steps.aws-account.outputs.account_id }}" >> $GITHUB_ENV
          echo "Using TF_BUCKET=$TF_BUCKET"
          echo "Using BACKUP_BUCKET=$BACKUP_BUCKET"

      # ─────────────────────────────────────────────────────────────────────────────
      # Infra applies (your repo-managed infra). Keep or remove as needed.
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Terraform Apply VPC
        if: github.event_name == 'workflow_dispatch' || contains(join(github.event.commits.*.modified), 'infra/')
        run: |
          cd infra/vpc
          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/vpc/terraform.tfstate" \
            -backend-config="region=${TF_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply NLB
        if: github.event_name == 'workflow_dispatch' || contains(join(github.event.commits.*.modified), 'infra/')
        run: |
          cd infra/nlb
          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/nlb/terraform.tfstate" \
            -backend-config="region=${TF_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply API Gateway
        if: github.event_name == 'workflow_dispatch' || contains(join(github.event.commits.*.modified), 'infra/')
        run: |
          cd infra/rest-api
          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/rest-api/terraform.tfstate" \
            -backend-config="region=${TF_REGION}"
          terraform refresh -var-file="${{ github.event.inputs.ENV }}.tfvars"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply CloudWatch
        if: github.event_name == 'workflow_dispatch' || contains(join(github.event.commits.*.modified), 'infra/')
        run: |
          cd infra/cloudwatch
          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/cloudwatch/terraform.tfstate" \
            -backend-config="region=${TF_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply ECR (capture repo URL)
        id: ecr
        run: |
          cd infra/ecr
          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/ecr/terraform.tfstate" \
            -backend-config="region=${TF_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"
          # Try common output names
          ECR_REPO_URL=$(terraform output -raw ecr_repository_url 2>/dev/null || true)
          if [ -z "$ECR_REPO_URL" ]; then
            ECR_REPO_URL=$(terraform output -json repository_urls | jq -r '.[0]' 2>/dev/null || true)
          fi
          if [ -z "$ECR_REPO_URL" ] || [ "$ECR_REPO_URL" = "null" ]; then
            echo "Could not read ECR repo URL from Terraform outputs"; exit 1
          fi
          echo "ECR_REPO_URL=$ECR_REPO_URL" >> $GITHUB_ENV
          echo "Using ECR: $ECR_REPO_URL"

      - name: Terraform Apply SSM (publish app env)
        id: ssm
        run: |
          cd infra/ssm
          PARAM_NAME="/idlms/shared/${{ github.event.inputs.ENV }}/.env"
          if aws ssm get-parameter --name "$PARAM_NAME" --with-decryption > /dev/null 2>&1; then
            ENV_CONTENT=$(aws ssm get-parameter --name "$PARAM_NAME" --with-decryption --query "Parameter.Value" --output text)
            BASE64_ENV=$(echo "$ENV_CONTENT" | base64 -w 0)
          else
            BASE64_ENV=$(echo "# placeholder env" | base64 -w 0)
          fi
          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/ssm/terraform.tfstate" \
            -backend-config="region=${TF_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars" -var="app_env_content=${BASE64_ENV}"
          SSM_ENV_PARAM=$(terraform output -raw ssm_env_param_name | tr -d '\r\n' | sed 's/^ssm:\/\///')
          echo "SSM_ENV_PARAM=$SSM_ENV_PARAM" >> $GITHUB_ENV
          echo "Published env to SSM: $SSM_ENV_PARAM"

      - name: Terraform Apply S3
        id: s3_apply
        run: |
          cd infra/s3
          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/s3/terraform.tfstate" \
            -backend-config="region=${TF_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"
          echo "Uploading docker-compose.yml to s3://$BACKUP_BUCKET/${{ github.event.inputs.ENV }}/docker-compose.yml"
          aws s3 cp docker/docker-compose.yml "s3://$BACKUP_BUCKET/${{ github.event.inputs.ENV }}/docker-compose.yml"

      # ─────────────────────────────────────────────────────────────────────────────
      # Build & push images (compose-friendly)
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate build tags
        id: tags
        run: |
          DATE_TAG=$(date +'%Y.%m.%d')
          BUILD_NUM=$(printf "%03d" $GITHUB_RUN_NUMBER)
          BUILD_TAG="${DATE_TAG}.${BUILD_NUM}"
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
          echo "Build tag: $BUILD_TAG"

      - name: Build & push via docker compose if images are defined
        env:
          IMAGE_REPO: ${{ env.ECR_REPO_URL }}
          BUILD_TAG:  ${{ env.BUILD_TAG }}
        run: |
          set -euo pipefail
          if [ -f docker/docker-compose.yml ] && grep -qE '^\s*image:' docker/docker-compose.yml; then
            echo "Found image fields in compose; building & pushing with compose"
            export IMAGE_REPO BUILD_TAG
            docker compose -f docker/docker-compose.yml build
            # compose push will push services that have 'image:' pointing at ECR and proper auth
            docker compose -f docker/docker-compose.yml push || true
          else
            echo "No 'image:' fields found in compose. Will still build/push a canonical image below."
          fi

      - name: Canonical single-image build & push (fallback/guarantee)
        env:
          ECR_REPO_URL: ${{ env.ECR_REPO_URL }}
          BUILD_TAG:    ${{ env.BUILD_TAG }}
        run: |
          set -euo pipefail
          IMAGE_URI="${ECR_REPO_URL}:${BUILD_TAG}"
          LATEST_URI="${ECR_REPO_URL}:latest"
          echo "IMAGE_URI=$IMAGE_URI"   >> $GITHUB_ENV
          echo "LATEST_URI=$LATEST_URI" >> $GITHUB_ENV
          # Adjust Dockerfile/context if your repo differs
          docker build -t "$IMAGE_URI" -t "$LATEST_URI" -f docker/Dockerfile src
          docker push "$IMAGE_URI"
          docker push "$LATEST_URI"

      - name: Determine tag to deploy
        id: determine-tag
        run: |
          TAG="${{ github.event.inputs.ROLLBACK_TAG }}"
          if [ -z "$TAG" ]; then TAG="${{ env.BUILD_TAG }}"; fi
          echo "TAG_TO_DEPLOY=$TAG" >> $GITHUB_ENV
          echo "Deploying tag: $TAG"

      # ─────────────────────────────────────────────────────────────────────────────
      # Deploy on EC2 via SSM (docker-compose + rollback)
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Deploy containers with rollback logic via SSM
        run: |
          TAG_TO_DEPLOY="${{ env.TAG_TO_DEPLOY }}"
          ENV="${{ github.event.inputs.ENV }}"
          ECR_REPO_URL="${{ env.ECR_REPO_URL }}"
          AWS_REGION="${{ env.AWS_REGION }}"
          BACKUP_BUCKET="${{ env.BACKUP_BUCKET }}"

          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Backend API IDLMS-${ENV}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --region "$AWS_REGION" \
            --output text)

          if [ -z "$INSTANCE_ID" ]; then
            echo "ERROR: No running EC2 instance found for environment $ENV"
            exit 1
          fi

          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "$INSTANCE_ID" \
            --comment "Deploy containers with rollback logic" \
            --parameters 'commands=[
              "set -e",
              "cd /home/ubuntu",
              "ENV_CONTENT=$(aws ssm get-parameter --name \"/idlms/shared/'"$ENV"'/.env\" --with-decryption --query \"Parameter.Value\" --output text)",
              "echo \"$ENV_CONTENT\" > .env",
              "echo \"BUILD_TAG='"$TAG_TO_DEPLOY"'\" >> .env",
              "echo \"IMAGE_REPO='"$ECR_REPO_URL"'\" >> .env",
              "aws s3 cp s3://'"$BACKUP_BUCKET"'/'"$ENV"'/docker-compose.yml docker-compose.yml",
              "if ! command -v docker &> /dev/null; then sudo apt-get update -y && sudo apt-get install -y docker.io; fi",
              "if ! command -v docker-compose &> /dev/null; then curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose && ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose || true; fi",
              "aws ecr get-login-password --region '"$AWS_REGION"' | docker login --username AWS --password-stdin '"${ECR_REPO_URL%/*}"'",
              "docker-compose --env-file .env down || true",
              "docker rmi ${IMAGE_REPO}:${BUILD_TAG} || true",
              "docker-compose --env-file .env pull --ignore-pull-failures",
              "docker-compose --env-file .env up -d --force-recreate --build",
              "sleep 60",
              "RUNNING_CONTAINERS=$(docker ps --format '{{.Names}}' | grep -E \\\"api1|api2|api3\\\" | wc -l) && \
              if [ \\\"$RUNNING_CONTAINERS\\\" -lt 1 ]; then \
                echo \\\"Deployment failed. Rolling back...\\\"; \
                PREV_TAG=$(aws ssm get-parameter --name \\\"/idlms/license-api/last-successful-build\\\" --query \\\"Parameter.Value\\\" --output text); \
                echo \\\"Rolling back to tag: $PREV_TAG\\\"; \
                sed -i \\\"/BUILD_TAG=/d\\\" .env; \
                echo \\\"BUILD_TAG=$PREV_TAG\\\" >> .env; \
                docker-compose --env-file .env down || true; \
                docker rmi ${IMAGE_REPO}:${BUILD_TAG} || true; \
                docker-compose --env-file .env pull --ignore-pull-failures; \
                docker-compose --env-file .env up -d --force-recreate --build; \
              else \
                echo \\\"All containers are up. Saving $TAG_TO_DEPLOY as last-successful-build...\\\"; \
                aws ssm put-parameter --name \\\"/idlms/license-api/last-successful-build\\\" --value \\\"$TAG_TO_DEPLOY\\\" --type String --overwrite; \
              fi"
            ]' \
            --timeout-seconds 900 \
            --region "$AWS_REGION" \
            --output text